{
  "dict": {
    "backup_data_uid": "399425451d314999",
    "ck_to_env": {
      "CK_WA_SCRIPTS_PATH": "script:39157fb314f399ae"
    },
    "clean_dirs": [
      "wa_output"
    ],
    "data_name": "WA workload: power_loadtest",
    "deps": {
      "android-sdk": {
        "android-sdk": {
          "force_target_as_host": "yes",
          "local": "yes",
          "name": "Android SDK",
          "sort": 5,
          "tags": "android,sdk"
        }
      },
      "wa": {
        "env_key": "WA",
        "force_target_as_host": "yes",
        "local": "yes",
        "name": "ARM Workload Automation",
        "sort": 10,
        "tags": "tool,wa"
      }
    },
    "no_compile": "yes",
    "no_target_file": "yes",
    "params": {
      "board": {
        "allowed_values": null,
        "default": null,
        "desc": "The name of the board to be used for the test. If this is not specified, BOARD environment variable will be used.",
        "mandatory": null,
        "type": "str"
      },
      "modules": {
        "allowed_values": null,
        "default": null,
        "desc": "Lists the modules to be loaded by this extension. A module is a plug-in that further extends functionality of an extension.",
        "mandatory": null,
        "type": "list"
      },
      "run_timeout": {
        "allowed_values": null,
        "default": 86400,
        "desc": "Timeout, in seconds, for the test execution.",
        "mandatory": null,
        "type": "integer"
      },
      "test_that_args": {
        "allowed_values": null,
        "default": "",
        "desc": "Extra arguments to be passed to test_that_invocation.",
        "mandatory": null,
        "type": "arguments"
      },
      "variant": {
        "allowed_values": null,
        "default": null,
        "desc": "The variant of the test to run; If not specified, the full power_LoadTest will run (until the device battery is drained). The only other variant available in the vanilla test is \"1hour\", but further variants may be added by providing custom control files.",
        "mandatory": null,
        "type": "str"
      }
    },
    "print_files_after_run": [
      "tmp-output2.tmp",
      "wa_output/status.txt",
      "wa_output/power_loadtest_1_1/result.txt"
    ],
    "process_in_tmp": "yes",
    "program": "yes",
    "required_device_access_type": [
      "wa_android",
      "wa_linux"
    ],
    "run_cmds": {
      "default": {
        "ignore_return_code": "no",
        "run_time": {
          "fine_grain_timer_file": "tmp-ck-timer.json",
          "post_process_cmds": [
            "python $<<CK_WA_SCRIPTS_PATH>>$$#dir_sep#$postprocess_workload.py"
          ],
          "post_process_via_ck": "yes",
          "pre_process_via_ck": {
            "data_uoa": "process-wa",
            "module_uoa": "script",
            "script_name": "preprocess_workload"
          },
          "run_cmd_main": "wa run $<<CK_WA_CMD>>$",
          "run_cmd_out1": "tmp-output1.tmp",
          "run_cmd_out2": "tmp-output2.tmp",
          "run_output_files": []
        }
      }
    },
    "run_via_third_party": "yes",
    "tags": [
      "wa",
      "workload-automation",
      "power_loadtest"
    ],
    "wa_alias": "power_loadtest",
    "wa_desc": "power_LoadTest (part of ChromeOS autotest suite) continuously cycles through a set of browser-based activities and monitors battery drain on a device"
  },
  "misc": {
    "data_uid": "399425451d314999",
    "data_uoa": "wa-power_loadtest",
    "host_os": "any",
    "module_uid": "b0ac08fe1d3c2615",
    "module_uoa": "program",
    "repo_uid": "cca2211feceec6dc",
    "repo_uoa": "ck-wa-workloads",
    "repo_url1": "",
    "repo_url2": "https://github.com/ctuning/ck-wa-workloads/tree/master/program/wa-power_loadtest/.cm/meta.json",
    "repo_url3": "https://github.com/ctuning/ck-wa-workloads/tree/master/program/wa-power_loadtest",
    "soft_name": "",
    "stags": "wa,workload-automation,power_loadtest",
    "tags": [
      "wa",
      "workload-automation",
      "power_loadtest"
    ],
    "target_os": "any",
    "template": "",
    "to_get": "ck pull repo:ck-wa-workloads",
    "version": ""
  }
}
